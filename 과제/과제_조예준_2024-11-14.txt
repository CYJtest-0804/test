파일 업로드/다운로드, 집계쿼리로 순위 출력하기 과제


Student.xml <!-- 쿼리작성>
-----------------------------------------------------------------
	<select id = "selectStudentRank" resultType = "egovMap">
		SELECT
			RANK() OVER(ORDER BY totalScore DESC) rank
			,score_year
			,semester
			,score_division
			,student_id
			,student_name
			,totalScore
			,avgScore
		FROM (SELECT
			ssc.score_year
			,ssc.semester
			,ssc.score_division
			,ssc.student_id
			,sre.student_name
			,SUM(ssc.scores) OVER(PARTITION BY ssc.semester, ssc.score_division DESC, ssc.student_id) totalScore
			,AVG(ssc.scores) OVER(PARTITION BY ssc.semester, ssc.score_division DESC, ssc.student_id) avgScore
			FROM saa_student_scores_information ssc, saa_student_register sre
			WHERE ssc.student_id = sre.student_id
				AND sre.student_grade = #{studentGrade}
				AND score_year = #{scoreYear}
				AND ssc.semester = #{semester}
				AND ssc.score_division = #{scoreDivision})
		GROUP BY student_id
	</select>
-----------------------------------------------------------------

StudentMapper.java 
-----------------------------------------------------------------
List<EgovMap> selectStudentRank(EgovMap paramMap) throws SQLException;
-----------------------------------------------------------------

StudentService.java 
-----------------------------------------------------------------
List<EgovMap> selectStudentRank(EgovMap paramMap) throws SQLException;
-----------------------------------------------------------------

StudentServiceImpl.java 
-----------------------------------------------------------------
public List<EgovMap> selectStudentRank(EgovMap paramMap) throws DataAccessException, SQLException {
        return studentMapper.selectStudentRank(paramMap);
    }
-----------------------------------------------------------------

StudentController.java <!-- 코드 추가>
-----------------------------------------------------------------
	@RequestMapping(value = "/student/file_upload.do")
	public String file(ModelMap model, HttpServletRequest request) {
	    LOGGER.info("파일 첨부 페이지");

	    // 업로드된 파일 목록을 가져옴
	    String uploadPath = "C://MANPAWP//파일저장소"; // 파일이 저장된 경로
	    File uploadDir = new File(uploadPath);
	    File[] files = uploadDir.listFiles(); // 디렉토리 내 모든 파일 목록 가져오기

	    if (files != null) {
	        model.addAttribute("uploadedFiles", files);
	    }

	    return "saa/student/file_upload"; // 파일 목록을 전달하는 JSP로 이동
	}

	@RequestMapping(value = "/student/file_upload_proc.do", method = RequestMethod.POST)
	public String uploadFiles(@RequestParam("file_upload") MultipartFile[] files) {
	    LOGGER.info("파일 업로드 처리");

	    if (files.length == 0 || Arrays.stream(files).allMatch(MultipartFile::isEmpty)) {
	        LOGGER.warn("업로드할 파일이 없습니다.");
	        return "redirect:/student/file_upload.do"; // 파일이 없을 경우 리다이렉트
	    }

	    String uploadPath = "C://MANPAWP//파일저장소"; // 원하는 경로로 변경
	    for (MultipartFile file : files) {
	        if (!file.isEmpty()) {
	            try {
	                // 원본 파일 이름 가져오기
	                String originalFileName = file.getOriginalFilename();
	                // 파일 이름 중복을 피하기 위해 UUID를 사용하여 파일 이름 변경
	                String uniqueFileName = UUID.randomUUID().toString() + "_" + originalFileName;

	                // 새로운 파일 경로
	                File destinationFile = new File(uploadPath + "/" + uniqueFileName);

	                // 파일 저장
	                file.transferTo(destinationFile);
	                LOGGER.info("파일이 성공적으로 업로드되었습니다 : " + uniqueFileName);
	            } catch (IOException e) {
	                LOGGER.error("파일 업로드 중 오류 발생: ", e);
	                return "redirect:/student/file_upload.do"; // 오류 발생 시 리다이렉트
	            }
	        }
	    }

	    return "redirect:/student/file_upload.do"; // 성공적으로 업로드된 후 학생 목록으로 리다이렉트
	}

	    private static final String UPLOAD_DIR = "C://MANPAWP//파일저장소";

	    // 개별 파일 다운로드 메서드
	    @RequestMapping(value = "/student/downloadFile.do", method = RequestMethod.GET)
	    public void downloadFile(@RequestParam("fileName") String fileName, HttpServletResponse response) {
	        try {
	            File file = new File(UPLOAD_DIR, fileName);

	            if (file.exists()) {
	                String encodedFileName = URLEncoder.encode(file.getName(), "UTF-8").replaceAll("\\+", "%20");
	                response.setContentType("application/octet-stream");
	                response.setContentLength((int) file.length());
	                response.setHeader("Content-Disposition", "attachment; filename=\"" + encodedFileName + "\";");
	                response.setHeader("Content-Transfer-Encoding", "binary");

	                try (FileInputStream fis = new FileInputStream(file);
	                     OutputStream out = response.getOutputStream()) {
	                    byte[] buffer = new byte[1024];
	                    int length;
	                    while ((length = fis.read(buffer)) > 0) {
	                        out.write(buffer, 0, length);
	                    }
	                    out.flush();
	                }
	            } else {
	                response.sendError(HttpServletResponse.SC_NOT_FOUND);
	            }
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }

	    @RequestMapping(value = "/student/downloadAllFilesAsZip.do", method = RequestMethod.GET)
	    public void downloadAllFilesAsZip(HttpServletResponse response) {
	        File uploadDir = new File(UPLOAD_DIR);

	        // 디렉토리 존재 여부 확인
	        if (!uploadDir.exists() || !uploadDir.isDirectory()) {
	            try {
	                response.sendError(HttpServletResponse.SC_NOT_FOUND, "파일 저장소가 존재하지 않습니다.");
	            } catch (IOException e) {
	                e.printStackTrace();
	            }
	            return;
	        }

	        File[] files = uploadDir.listFiles();

	        // 파일이 없을 때 처리
	        if (files == null || files.length == 0) {
	            try {
	                response.sendError(HttpServletResponse.SC_NOT_FOUND, "압축할 파일이 없습니다.");
	            } catch (IOException e) {
	                e.printStackTrace();
	            }
	            return;
	        }

	        try {
	            String zipFileName = "all_files.zip";
	            response.setContentType("application/zip");
	            response.setHeader("Content-Disposition", "attachment; filename=\"" + zipFileName + "\";");

	            try (ZipOutputStream zos = new ZipOutputStream(response.getOutputStream())) {
	                for (File file : files) {
	                    if (file.isFile()) {
	                        try (FileInputStream fis = new FileInputStream(file)) {
	                            zos.putNextEntry(new ZipEntry(file.getName()));
	                            byte[] buffer = new byte[1024];
	                            int length;
	                            while ((length = fis.read(buffer)) > 0) {
	                                zos.write(buffer, 0, length);
	                            }
	                            zos.closeEntry();
	                        } catch (IOException e) {
	                            e.printStackTrace(); // 개별 파일 읽기 실패 시 오류 출력 (계속 진행)
	                        }
	                    }
	                }
	                zos.finish();
	            }
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	@RequestMapping(value = "/student/student_rank.do")
	public String StudentRank(ModelMap model, HttpServletRequest request) throws DataAccessException, RuntimeException, IOException, SQLException {
		LOGGER.info("학생 순위");

		EgovMap egovMap = new EgovMap();
		LOGGER.info("egovMap ::: " + egovMap);

		return "saa/student/student_rank";
	}
	@RequestMapping(value = "/student/student_rank_proc.do")
	public String selectStudentRankList(ModelMap model, HttpServletRequest request) throws DataAccessException, RuntimeException, IOException, SQLException {
	    LOGGER.info("학생 순위 조회");

	    String scoreYear = request.getParameter("score_year");
	    String studentGrade = request.getParameter("student_grade");
	    String semester = request.getParameter("semester");
	    String scoreDivision = request.getParameter("score_division");

	    EgovMap egovMap = new EgovMap();
	    egovMap.put("scoreYear", scoreYear);
	    egovMap.put("studentGrade", studentGrade);
	    egovMap.put("semester", semester);
	    egovMap.put("scoreDivision", scoreDivision);
	    LOGGER.info("성적연도 ::: " + scoreYear);
	    LOGGER.info("학년 ::: " + studentGrade);
	    LOGGER.info("학기 ::: " + semester);
	    LOGGER.info("구분 ::: " + scoreDivision);

	    List<EgovMap> student = studentService.selectStudentRank(egovMap);

	    model.addAttribute("student", student);

	    return "saa/student/student_rankList";
	}
-----------------------------------------------------------------

file_upload.jsp <!-- 신규작성>
-----------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>파일 업로드 및 다운로드</title>
    <link href="/css/style.css" rel="stylesheet">
    <script>
        function validateUpload() {
            const fileInput = document.getElementById('file_upload');
            if (!fileInput.files.length) {
                alert("업로드에 실패했습니다.");
                return false;
            }
            alert("업로드되었습니다.");
            return true;
        }

        function downloadFile(fileName) {
            window.location.href = '/student/downloadFile.do?fileName=' + encodeURIComponent(fileName);
        }

        function downloadAllFilesAsZip() {
            window.location.href = '/student/downloadAllFilesAsZip.do';
        }

        // 이미지 미리보기
        function previewImage(event) {
            const fileInput = event.target;
            const previewContainer = document.getElementById('image-preview-container');
            previewContainer.innerHTML = ''; // 이전 미리보기 제거

            const files = fileInput.files;
            if (files.length === 0) return;

            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                if (file && file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const imgElement = document.createElement('img');
                        imgElement.src = e.target.result;
                        imgElement.alt = "미리보기";
                        imgElement.style.maxWidth = "300px"; // 최대 너비 설정
                        imgElement.style.maxHeight = "300px"; // 최대 높이 설정
                        previewContainer.appendChild(imgElement);
                    };
                    reader.readAsDataURL(file);
                }
            }
        }
    </script>
</head>
<body>
    <!-- 파일 업로드 영역 -->
    <div class="upload-container">
        <h2>파일 업로드</h2>
        <form action="/student/file_upload_proc.do" method="POST" enctype="multipart/form-data" onsubmit="return validateUpload();">
            <div>
                <input type="file" name="file_upload" id="file_upload" multiple required onchange="previewImage(event)">
            </div>
            <!-- 이미지 미리보기 출력 영역 -->
            <div id="image-preview-container" style="text-align: center; margin-top: 10px;"></div>
            <div>
                <button type="submit" class="upload-button">업로드</button>
            </div>
        </form>
    </div>

    <!-- 업로드된 파일 목록 -->
    <div class="uploaded-files">
        <h3 style="text-align: center;">업로드된 파일 목록</h3>
        <ul class="file-list">
            <c:forEach var="file" items="${uploadedFiles}">
                <li style="display: flex; justify-content: center; align-items: center;">
                    <span style="margin-right: 10px;">${file.name}</span>
                    <button onclick="downloadFile('${file.name}')">다운로드</button>
                </li>
            </c:forEach>
        </ul>
        <!-- 모든 파일 ZIP 다운로드 버튼 -->
        <div style="text-align: center; margin-top: 20px;">
            <button onclick="downloadAllFilesAsZip()">모든 파일 ZIP 다운로드</button>
        </div>
    </div>

    <!-- 학생 목록 버튼 -->
    <div class="button-container">
        <button type="button" onclick="location.href='student_list.do';">학생 목록</button>
    </div>
</body>
</html>
-----------------------------------------------------------------

student_rank.jsp <!-- 신규작성 / 조회할 성적순위의 정보 입력>
-----------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>학생 상세정보</title>
	<link href='/css/style.css' rel='stylesheet'>
	<script>
		function validateForm() {
			const scoreYear = document.getElementById("score_year").value;
			const studentGrade = document.getElementById("student_grade").value;
			const semester = document.getElementById("semester").value;
			const scoreDivision = document.getElementById("score_division").value;

			// Check if fields are empty
			if (!scoreYear) {
				alert("성적연도를 입력하세요.");
				document.getElementById("score_year").focus();
				return false;
			}
			if (!studentGrade) {
				alert("학년을 입력하세요.");
				document.getElementById("student_grade").focus();
				return false;
			}
			if (!semester) {
				alert("학기를 입력하세요.");
				document.getElementById("semester").focus();
				return false;
			}
			if (!scoreDivision) {
				alert("구분을 입력하세요.");
				document.getElementById("score_division").focus();
				return false;
			}

			// Check if fields are numeric
			if (isNaN(scoreYear)) {
				alert("성적연도는 숫자여야 합니다.");
				document.getElementById("score_year").focus();
				return false;
			}
			if (isNaN(studentGrade)) {
				alert("학년은 숫자여야 합니다.");
				document.getElementById("student_grade").focus();
				return false;
			}
			if (isNaN(semester)) {
				alert("학기는 숫자여야 합니다.");
				document.getElementById("semester").focus();
				return false;
			}

			// If all checks pass, submit the form
			document.getElementById("studentFrm").submit();
		}
	</script>
</head>
<body>
	<div>
		<h2>학생 순위 조회</h2>
		<form name="studentFrm" id="studentFrm" method="post" action="student_rank_proc.do">
			<table class="dataTable">
				<tr>
					<th>성적연도</th>
					<td><input type="text" name="score_year" id="score_year" size="10"/></td>
				</tr>
				<tr>
					<th>학년</th>
					<td><input type="text" name="student_grade" id="student_grade" size="10"/></td>
				</tr>
				<tr>
					<th>학기</th>
					<td><input type="text" name="semester" id="semester" size="10"/></td>
				</tr>
				<tr>
					<th>구분</th>
					<td><input type="text" name="score_division" id="score_division" size="10"/></td>
				</tr>
			</table>
		</form>
	</div>
	<p>
	<div class="button-container">
		<button type="button" onclick="validateForm()">조회</button>
		<button type="button" onclick="location.href='student_list.do';">학생목록</button>
	</div>
</body>
</html>
-----------------------------------------------------------------

student_rankList.jsp <!--신규 작성 / 순위 목록>
-----------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>학생 순위</title>
	<link href='/css/style.css' rel='stylesheet'>
</head>
<body>
	<h2>학생 순위</h2>
	<table class="dataTable">
		<thead>
			<tr>
				<th>순위</th>
				<th>성적연도</th>
				<th>학기</th>
				<th>구분</th>
				<th>학번</th>
				<th>이름</th>
				<th>총점</th>
				<th>평균</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="student" items="${student}">
			    <tr>
			        <td>${student.rank}</td>
			        <td>${student.scoreYear}</td>
			        <td>${student.semester}</td>
			        <td>${student.scoreDivision}</td>
			        <td>${student.studentId}</td>
			        <td>${student.studentName}</td>
			        <td><fmt:formatNumber value="${student.totalScore}" maxFractionDigits="1"/></td>
			        <td><fmt:formatNumber value="${student.avgScore}" maxFractionDigits="1"/></td>
			    </tr>
			</c:forEach>
		</tbody>
	</table>
	<div class="button-container">
		<button type="button" onclick="location.href='student_rank.do';">돌아가기</button>
		<button type="button" onclick="location.href='student_list.do';">학생목록</button>
	</div>
</body>
</html>
-----------------------------------------------------------------


