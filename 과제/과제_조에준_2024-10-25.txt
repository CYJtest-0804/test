학생 상세정보 조회하기/수정하기/삭제하기를 구현하기 위해 각각 알맞은 코드들을 추가해줬습니다.



student.xml
---------------------------------------------------------------------------------

	<select id="selectStudentView" parameterType="egovMap" resultType="EgovMap">
		SELECT
			student_id
			,student_name
			,phone_number
			,resident_registration_number
			,address
			,birth_date
			,emergency_phone_number
		 FROM saa_student_information
		 WHERE student_id = #{studentId}
	</select>

	<update id="updateStudent">
   		UPDATE saa_student_information
	    SET student_name = #{studentName},
	        phone_number = #{phoneNumber},
	        resident_registration_number = #{residentRegistrationNumber},
	        address = #{address},
	        birth_date = #{birthDate},
	        emergency_phone_number = #{emergencyPhoneNumber}
	    WHERE student_id = #{studentId}
	</update>

	<update id="updateStudentRegister">
	    UPDATE saa_student_register
	    SET student_name = #{studentName}
	    WHERE student_id = #{studentId}
	</update>

	<delete id = "deleteStudent">
		DELETE FROM saa_student_information WHERE student_id = #{studentId};
		DELETE FROM saa_student_register WHERE student_id = #{studentId};
	</delete>


---------------------------------------------------------------------------------



StudentMapper.java
---------------------------------------------------------------------------------

	EgovMap selectStudentView(EgovMap paramMap) throws SQLException;
	void updateStudent(EgovMap paramMap) throws SQLException;
	void updateStudentRegister(EgovMap paramMap) throws SQLException;
	void deleteStudent(EgovMap paramMap) throws SQLException;

---------------------------------------------------------------------------------



StudentService.java
---------------------------------------------------------------------------------

	EgovMap selectStudentView(EgovMap paramMap) throws SQLException;
	void updateStudent(EgovMap paramMap) throws SQLException;
	void updateStudentRegister(EgovMap paramMap) throws SQLException;
	void deleteStudent(EgovMap paramMap) throws SQLException;

---------------------------------------------------------------------------------



StudentServiceImpl.java
---------------------------------------------------------------------------------

	@Override
	public EgovMap selectStudentView(EgovMap paramMap) throws DataAccessException, SQLException {
		return studentMapper.selectStudentView(paramMap);
	}
	@Override
	public void updateStudent(EgovMap egovMap) throws DataAccessException, SQLException {
		studentMapper.updateStudent(egovMap);
	}
	@Override
    	public void updateStudentRegister(EgovMap egovMap) throws DataAccessException, SQLException {
        	studentMapper.updateStudentRegister(egovMap);
   	}
	@Override
    	public void deleteStudent(EgovMap egovMap) throws DataAccessException, SQLException {
        studentMapper.deleteStudent(egovMap);
    	}

---------------------------------------------------------------------------------



StudentController.java
---------------------------------------------------------------------------------

	@RequestMapping(value = "/student/student_view.do")
	public String selectStudentView(ModelMap model, HttpServletRequest request) throws DataAccessException, RuntimeException, IOException, SQLException {
	    LOGGER.info("학생 상세 정보");

	    String studentId = request.getParameter("student_id");

	    EgovMap egovMap = new EgovMap();
	    egovMap.put("studentId", studentId);
	    LOGGER.info("학생번호 ::: " + studentId);

	    EgovMap student = studentService.selectStudentView(egovMap);

	    model.addAttribute("student", student);

	    return "saa/student/student_view";
	}

	@RequestMapping(value = "/student/student_edit.do")
	public String editStudent(ModelMap model, HttpServletRequest request) throws DataAccessException, RuntimeException, IOException, SQLException {
	    LOGGER.info("학생 정보 수정 페이지");

	    String studentId = request.getParameter("student_id");

	    EgovMap egovMap = new EgovMap();
	    egovMap.put("studentId", studentId);
	    LOGGER.info("학생번호 ::: " + studentId);

	    EgovMap student = studentService.selectStudentView(egovMap);
	    model.addAttribute("student", student);

	    return "saa/student/student_edit";
	}

	@RequestMapping(value = "/student/student_edit_proc.do")
	public String updateStudent(ModelMap model, HttpServletRequest request) throws DataAccessException, RuntimeException, IOException, SQLException {
	    LOGGER.info("학생 정보수정 처리");

	    String studentId = request.getParameter("student_id");
	    String studentName = request.getParameter("student_name");
	    String phoneNumber = request.getParameter("phone_number");
	    String residentRegistrationNumber = request.getParameter("resident_registration_number");
	    String address = request.getParameter("address");
	    String birthDate = request.getParameter("birth_date");
	    String emergencyPhoneNumber = request.getParameter("emergency_phone_number");

	    // EgovMap 객체에 수정할 학생 정보 추가
	    EgovMap egovMap = new EgovMap();
	    egovMap.put("studentId", studentId);
	    egovMap.put("studentName", studentName);
	    egovMap.put("phoneNumber", phoneNumber);
	    egovMap.put("residentRegistrationNumber", residentRegistrationNumber);
	    egovMap.put("address", address);
	    egovMap.put("birthDate", birthDate);
	    egovMap.put("emergencyPhoneNumber", emergencyPhoneNumber);
	    LOGGER.info("수정할 학생 정보 ::: " + egovMap);

	    studentService.updateStudent(egovMap);
	    studentService.updateStudentRegister(egovMap);

	    return "redirect:/student/student_view.do?student_id=" + studentId; 
	}

	@RequestMapping(value = "/student/student_delete_proc.do")
	public String deleteStudent(ModelMap model, HttpServletRequest request) throws DataAccessException, RuntimeException, IOException, SQLException {
	    LOGGER.info("학생 삭제 처리");

	    // 요청 파라미터에서 student_id를 가져옴
	    String studentId = request.getParameter("student_id");
	    LOGGER.info("삭제할 학생번호 ::: " + studentId);

	    // EgovMap 객체를 생성하여 studentId를 추가
	    EgovMap egovMap = new EgovMap();
	    egovMap.put("studentId", studentId);

	    // 학생 정보 삭제 서비스 호출
	    studentService.deleteStudent(egovMap);

	    // 학생 목록 페이지로 리다이렉트
	    return "redirect:/student/student_list.do";
	}


--------------------------------------------------------------------------------



student_view.jsp // 새롭게 작성
---------------------------------------------------------------------------------

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>학생 상세정보</title>
	<link href = '/css/style.css' rel = 'stylesheet'>
	<script>
	function confirmDelete(studentId) {
	    // 확인 팝업을 띄우고 사용자의 선택을 받음
	    if (confirm('정말 삭제하시겠습니까?')) {
	        // 사용자가 "확인"을 클릭하면 삭제 요청으로 이동
	        location.href = 'student_delete_proc.do?student_id=' + studentId;
	    }
	}
	</script>
</head>
<body>
	<h2>학생 상세정보</h2>
	<table class="dataTable">
		<thead>
			<tr>
				<th>학생번호</th>
				<th>학생이름</th>
				<th>휴대전화</th>
				<th>주민등록번호</th>
				<th>주소</th>
				<th>생년월일</th>
				<th>긴급전화</th>
			</tr>
		</thead>
		<tbody>
		    <tr>
		        <td>${student.studentId}</td>
		        <td>${student.studentName}</td>
		        <td>${student.phoneNumber}</td>
		        <td>${student.residentRegistrationNumber}</td>
		        <td>${student.address}</td>
		        <td>${student.birthDate}</td>
		        <td>${student.emergencyPhoneNumber}</td>
		    </tr>
		</tbody>
	</table>
	<p>
	<div class="button-container">
    	<button type="button" onclick="location.href='student_list.do';">목록</button>
    	<button type="button" onclick="location.href='student_edit.do?student_id=${student.studentId}';">수정</button>
    	<button type="button" onclick="location.href='student_score.do?student_id=${student.studentId}';">점수보기</button>
    	<button type="button" onclick="confirmDelete('${student.studentId}');">삭제</button>
	</div>
</body>
</html>

---------------------------------------------------------------------------------



student_edit.jsp
---------------------------------------------------------------------------------

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>학생 정보 수정</title>
	<script src="https://code.jquery.com/jquery-latest.min.js"></script>
	<link href='/css/style.css' rel='stylesheet'>
	<script>
	function fn_updateStudent() {
		var frm = document.studentFrm;
		if (!$("#student_name").val()) {
			alert("학생이름을 입력하세요.");
			$("#student_name").focus();
			return;
		}
		if (!$("#phone_number").val()) {
			alert("전화번호를 입력하세요.");
			$("#phone_number").focus();
			return;
		}
		if (!$("#resident_registration_number").val()) {
			alert("주민번호를 입력하세요.");
			$("#resident_registration_number").focus();
			return;
		}
		if (!$("#address").val()) {
			alert("주소를 입력하세요.");
			$("#address").focus();
			return;
		}
		if (!$("#birth_date").val()) {
			alert("생년월일을 입력하세요.");
			$("#birth_date").focus();
			return;
		}
		if (!$("#emergency_phone_number").val()) {
			alert("긴급전화를 입력하세요.");
			$("#emergency_phone_number").focus();
			return;
		}
		alert("수정이 완료되었습니다.");
		frm.submit();
	}
	</script>
</head>
<body>
	<h2>학생 정보 수정</h2>
	<form name="studentFrm" id="studentFrm" method="post" action="student_edit_proc.do">
		<input type="hidden" name="student_id" value="${student.studentId}"/>
		<table class="dataTable">
			<tr>
				<td>학생번호</td>
				<td>${student.studentId}</td>
			</tr>
			<tr>
				<td>학생이름</td>
				<td><input type="text" name="student_name" id="student_name" value="${student.studentName}" /></td>
			</tr>
			<tr>
				<td>휴대전화:</td>
				<td><input type="text" name="phone_number" id="phone_number"  value="${student.phoneNumber}" /></td>
			</tr>
			<tr>
				<td>주민등록번호</td>
				<td><input type="text" name="resident_registration_number" id="resident_registration_number"  value="${student.residentRegistrationNumber}" /></td>
			</tr>
			<tr>
				<td>주소</td>
				<td><input type="text" name="address" id="address"  value="${student.address}" /></td>
			</tr>
			<tr>
				<td>생년월일</td>
				<td><input type="date" name="birth_date" id="birth_date"  value = "${student.birthDate}"></td>
			</tr>
			<tr>
				<td>긴급전화</td>
				<td><input type="text" name="emergency_phone_number" id="emergency_phone_number"  value="${student.emergencyPhoneNumber}" /></td>
			</tr>
		</table>
		<div class="button-container">
			<button type="button" onclick="fn_updateStudent()">저장</button>
			<button type="button" onclick="location.href='student_view.do?student_id=${student.studentId}';">취소</button>
		</div>
	</form>
</body>
</html>

---------------------------------------------------------------------------------



























